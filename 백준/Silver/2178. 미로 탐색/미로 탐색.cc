#include<iostream>
#include<queue>
using namespace std;

static int dx[] = { 0,1,0,-1 };
static int dy[] = { 1,0,-1,0 };

static int A[101][101];
static bool visited[101][101];
static int N, M;
void BFS(int i, int j);

int main() {
	cin >> N >> M;

	for (int i = 0; i < N; i++) {
		string s;
		cin >> s;
		for (int j = 0; j < M; j++) {
			A[i][j] = s[j] - '0';	//하나씩 떼어서 넣기
		}
	}
	BFS(0, 0);
	cout << A[N - 1][M - 1];
}

void BFS(int i, int j) {
	queue<pair<int, int>>myQueue;
	myQueue.push(make_pair(i, j));	//둘이 쌍을 묶어 시작점 입력 (0,0)

	while (!myQueue.empty()) {	//방문해야할 위치가 더 없을 때
		int now[2];
		now[0] = myQueue.front().first;	//현재 좌표값
		now[1] = myQueue.front().second;	//현재 좌표값
		myQueue.pop();	//현재 자리 저장했으니 pop
		visited[i][j] = true;	//방문했으니 해당자리 참으로 초기화

		for (int i = 0; i < 4; i++) {
			int x = now[0] + dx[i];	//현재 좌표값에서 상하좌우
			int y = now[1] + dy[i]; //현재 좌표값에서 상하좌우

			if (x >= 0 && y >= 0 && x < N && y < M) {	//-1은 범위를 벗어났으므로
				if (A[x][y] != 0 && !visited[x][y]) {
					A[x][y] = A[now[0]][now[1]] + 1;
					visited[x][y] = true;
					myQueue.push(make_pair(x, y));
				}
			}
		}
	}
};


/*
1 2 0 0 0
2 3 0 0 0
0 0 1 0 0
0 0 0 1 1


Round 1:
시작점 (0, 0)에서 시작합니다.
현재 큐 상태: [(0, 0)]
현재 위치: (0, 0)
가능한 이동 방향:
오른쪽 (0, 1)
아래쪽 (1, 0)

이동:
오른쪽 (0, 1):
A[0][1] == 1이고, visited[0][1] == false이므로 이동 가능.
A[0][1] = A[0][0] + 1 = 2로 업데이트.
큐에 (0, 1) 추가.

아래쪽 (1, 0):
A[1][0] == 1이고, visited[1][0] == false이므로 이동 가능.
A[1][0] = A[0][0] + 1 = 2로 업데이트.
큐에 (1, 0) 추가.

방문 상태 업데이트: visited[0][0] = true, visited[0][1] = true, visited[1][0] = true
현재 큐 상태: [(0, 1), (1, 0)]



Round 2:
현재 위치: (0, 1)
현재 큐 상태: [(1, 0)]

가능한 이동 방향:
오른쪽 (0, 2)
아래쪽 (1, 1)
왼쪽 (0, 0)
위쪽 (-1, 1)

이동:
오른쪽 (0, 2):
A[0][2] == 0이므로 이동 불가.

아래쪽 (1, 1):
A[1][1] == 1이고, visited[1][1] == false이므로 이동 가능.
A[1][1] = A[0][1] + 1 = 3로 업데이트.
큐에 (1, 1) 추가.

왼쪽 (0, 0):
이미 방문한 위치이므로 이동 불가.

위쪽 (-1, 1):
범위를 벗어났으므로 이동 불가.
방문 상태 업데이트: visited[1][1] = true

현재 큐 상태: [(1, 0), (1, 1)]



Round 3:
현재 위치: (1, 0)
현재 큐 상태: [(1, 1)]

가능한 이동 방향:
오른쪽 (1, 1)
아래쪽 (2, 0)
왼쪽 (1, -1)
위쪽 (0, 0)

이동:
오른쪽 (1, 1):
이미 방문한 위치이므로 이동 불가.

아래쪽 (2, 0):
A[2][0] == 0이므로 이동 불가.

왼쪽 (1, -1):
범위를 벗어났으므로 이동 불가.

위쪽 (0, 0):
이미 방문한 위치이므로 이동 불가.
방문 상태 업데이트: 없음

현재 큐 상태: [(1, 1)]



Round 4:
현재 위치: (1, 1)
현재 큐 상태: []

가능한 이동 방향:
오른쪽 (1, 2)
아래쪽 (2, 1)
왼쪽 (1, 0)
위쪽 (0, 1)

이동:
오른쪽 (1, 2):
A[1][2] == 0이므로 이동 불가.

아래쪽 (2, 1):
A[2][1] == 0이므로 이동 불가.

왼쪽 (1, 0):
이미 방문한 위치이므로 이동 불가.

위쪽 (0, 1):
이미 방문한 위치이므로 이동 불가.
방문 상태 업데이트: 없음

현재 큐 상태: []

종료 조건:
큐가 비었으므로 BFS 종료. 최단 경로 값은 A[N-1][M-1]에 저장되어 있음.

결과:
cout << A[N - 1][M - 1];을 통해 (N-1, M-1) 위치까지의 최단 경로를 출력합니다.
*/